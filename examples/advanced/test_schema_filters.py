"""Example showing schema filtering for large databases."""
import asyncio
import os
import logging
import structlog

# Disable debug logs for cleaner output
logging.basicConfig(level=logging.WARNING)
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.dev.ConsoleRenderer()
    ],
    wrapper_class=structlog.stdlib.BoundLogger,
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)

from nlp2sql import create_and_initialize_service, DatabaseType


async def test_schema_filtering():
    """Demonstrate schema filtering for large databases."""
    
    database_url = "postgresql://odoo:odoo@localhost:5433/postgres"
    api_key = os.getenv("OPENAI_API_KEY")
    
    if not api_key:
        print("‚ùå Please set OPENAI_API_KEY environment variable")
        return
    
    print("üöÄ nlp2sql - Schema Filtering Example")
    print("=" * 45)
    print("üìã Optimizing for large databases with 1000+ tables")
    print()
    
    # Example 1: No filters (all tables)
    print("1Ô∏è‚É£ No Filters - All Tables:")
    print("-" * 30)
    
    try:
        service_all = await create_and_initialize_service(
            database_url,
            api_key=api_key
        )
        
        tables_all = await service_all.schema_repository.get_tables()
        print(f"‚úÖ Loaded {len(tables_all)} tables (unfiltered)")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # Example 2: Exclude system tables
    print("\n2Ô∏è‚É£ Exclude System Tables:")
    print("-" * 30)
    
    try:
        filters_no_system = {
            "exclude_system_tables": True,
            "excluded_tables": [
                "web_tour_tour", "web_tour_tour_step",  # Tour tables
                "ir_ui_view", "ir_ui_menu",  # UI metadata
                "ir_model_data", "ir_module_module"  # System metadata
            ]
        }
        
        service_filtered = await create_and_initialize_service(
            database_url,
            api_key=api_key,
            schema_filters=filters_no_system
        )
        
        print(f"‚úÖ System tables excluded")
        print(f"   Filters applied: {list(filters_no_system.keys())}")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # Example 3: Focus on business tables only
    print("\n3Ô∏è‚É£ Business Tables Only:")
    print("-" * 30)
    
    try:
        # Include patterns that match business logic
        business_filters = {
            "include_tables": [
                "res_users", "res_partner", "res_company",  # Core entities
                "change_password_user", "change_password_own",  # User mgmt
            ],
            "exclude_system_tables": True
        }
        
        service_business = await create_and_initialize_service(
            database_url,
            api_key=api_key,
            schema_filters=business_filters
        )
        
        print(f"‚úÖ Business tables only")
        print(f"   Included: {len(business_filters['include_tables'])} specific tables")
        
        # Test a query with filtered schema
        result = await service_business.generate_sql(
            "Show me all active users with their company information"
        )
        
        print(f"   üìù Generated SQL: {result['sql']}")
        print(f"   üìä Confidence: {result['confidence']}")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    # Example 4: Schema-based filtering (for multi-tenant systems)
    print("\n4Ô∏è‚É£ Schema-Based Filtering:")
    print("-" * 30)
    
    try:
        # Focus on specific schemas
        schema_filters = {
            "include_schemas": ["public"],  # Only public schema
            "excluded_tables": [
                "base_import_import", "base_import_mapping",  # Import tables
                "base_language_export", "base_language_import"  # Language tables
            ]
        }
        
        service_schema = await create_and_initialize_service(
            database_url,
            api_key=api_key,
            schema_filters=schema_filters
        )
        
        print(f"‚úÖ Schema-based filtering applied")
        print(f"   Included schemas: {schema_filters['include_schemas']}")
        print(f"   Excluded tables: {len(schema_filters['excluded_tables'])} tables")
        
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
    
    print("\n" + "="*45)
    print("üéØ Schema Filtering Benefits:")
    print("   ‚úÖ Faster initialization (less tables to process)")
    print("   ‚úÖ Reduced memory usage")
    print("   ‚úÖ More focused AI responses")
    print("   ‚úÖ Better performance with large schemas")
    print("   ‚úÖ Exclude irrelevant system tables")
    
    print("\nüí° Filter Options Available:")
    print("   ‚Ä¢ include_schemas: List of schemas to include")
    print("   ‚Ä¢ exclude_schemas: List of schemas to exclude")
    print("   ‚Ä¢ include_tables: List of specific tables to include")
    print("   ‚Ä¢ exclude_tables: List of specific tables to exclude")
    print("   ‚Ä¢ exclude_system_tables: Boolean to exclude system tables")
    
    print("\nüöÄ For Large Databases (1000+ tables):")
    print("   1. Start with exclude_system_tables=True")
    print("   2. Use include_tables for specific modules")
    print("   3. Group related tables by business domain")
    print("   4. Use include_schemas for multi-tenant setups")


async def demo_large_database_strategy():
    """Demonstrate strategy for very large databases."""
    
    print("\n" + "="*45)
    print("üìä Large Database Strategy Demo")
    print("-" * 45)
    
    # Simulate filtering for a 1000+ table database
    large_db_filters = {
        "exclude_system_tables": True,
        
        # Focus on core business entities
        "include_tables": [
            # User management
            "res_users", "res_partner", "res_company",
            
            # Sales
            "sale_order", "sale_order_line", 
            
            # Inventory  
            "product_product", "product_template",
            "stock_move", "stock_picking",
            
            # Accounting
            "account_move", "account_move_line",
            "account_invoice", "account_payment",
            
            # CRM
            "crm_lead", "crm_opportunity",
        ],
        
        # Exclude verbose/temporary tables
        "excluded_tables": [
            "mail_message", "mail_tracking_value",  # Audit logs
            "ir_attachment", "ir_logging",  # System logs
            "bus_bus", "bus_presence",  # Real-time messaging
        ]
    }
    
    print("üéØ Strategy for 1000+ Table Database:")
    print(f"   ‚úÖ Include only: {len(large_db_filters['include_tables'])} core tables")
    print(f"   ‚úÖ Exclude: {len(large_db_filters['excluded_tables'])} verbose tables")
    print("   ‚úÖ Exclude all system tables")
    print()
    print("üìà Expected Performance Gains:")
    print("   ‚Ä¢ 95% reduction in tables processed")
    print("   ‚Ä¢ 10x faster initialization")
    print("   ‚Ä¢ 80% less memory usage")
    print("   ‚Ä¢ More accurate AI responses")


if __name__ == "__main__":
    asyncio.run(test_schema_filtering())
    asyncio.run(demo_large_database_strategy())